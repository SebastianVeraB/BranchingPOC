/**
 * @description SOQLs related to Account for PSN
 * @date 01-28-2021
 */
public with sharing class AccountForPSNSelector {
    private static final String BASE_QUERY = 'SELECT {0} FROM AccountForPSN__c';
    private static final String BASE_SOSL_QUERY = 'FIND {0} IN NAME FIELDS RETURNING AccountForPSN__c({1})';

    public List<AccountForPSN__c> getAccountsForPSNById(Set<Id> accountForPSNIds) {
        return [
            SELECT
                Id,
                Name,
                Phone__c, 
                Country__c,
                My_Missing_filed__c,      
                First_Name__c,
                Last_Name__c,
                Status__c,
                Region__c,
                PlayStation_Now_Status__c,
                PlayStation_Now_End_Date__c,
                PlayStation_Plus_Status__c,
                PlayStation_Plus_End_Date__c
            FROM AccountForPSN__c
            WHERE Id IN :accountForPSNIds
        ];
    }

    public AccountForPSN__c getAccountForPSNByAccountId(String accountForPSNAccountId) {
        return [
            SELECT Id, Name, Sign_in_Id__c, Phone__c, Account_Id__c
            FROM AccountForPSN__c
            WHERE Account_Id__c = :accountForPSNAccountId
        ];
    }

    public List<AccountForPSN__c> getAllAccountsForPSN() {
        return [SELECT Id FROM AccountForPSN__c];
    }

    public List<AccountForPSN__c> searchAccountForPsn(
        String fieldApi,
        String fieldValue,
        List<String> psnAccountSelectFields
        
    ) {
        List<String> selectFields = new List<String>{ String.join(psnAccountSelectFields, ', ') };
        // we need a SOSL to search by Online Id (Name) because it's an encrypted field
        if (fieldApi == Constants.ONLINE_ID) {
            String queryString = String.format(
                BASE_SOSL_QUERY,

                new List<String>{ ':fieldValue', String.join(selectFields, ', ') }
            );

            List<List<AccountForPSN__c>> accountsForPSN = Search.query(queryString);
            return (List<AccountForPSN__c>) accountsForPSN[0];
        }


        String queryString = String.format(BASE_QUERY, selectFields);
        queryString +=
            ' WHERE ' +
            String.escapeSingleQuotes(fieldApi) +
            ' = \'' +
            String.escapeSingleQuotes(fieldValue) +
            '\'';

        return Database.query(queryString);
    }

    public String doSomething()
    {
        //... Complex Logic


        if(this.isBilable())
        {



        }
    }

    puiblic boolean isBilable()
    {
        
        return A && B || C ! C.B
    }
}
